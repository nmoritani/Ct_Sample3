#include <stdio.h>
#include <windows.h>
#include <assert.h> 
#include "amanithVG.h"

VGGETERROR	amanith_vg_geterror;
VGFLUSH	amanith_vg_flush;
VGFINISH	amanith_vg_finish;
VGSETF	amanith_vg_setf;
VGSETI	amanith_vg_seti;
VGSETFV	amanith_vg_setfv;
VGSETIV	amanith_vg_setiv;
VGGETF	amanith_vg_getf;
VGGETI	amanith_vg_geti;
VGGETVECTORSIZE	amanith_vg_getvectorsize;
VGGETFV	amanith_vg_getfv;
VGGETIV	amanith_vg_getiv;
VGSETPARAMETERF	amanith_vg_setparameterf;
VGSETPARAMETERI	amanith_vg_setparameteri;
VGSETPARAMETERFV	amanith_vg_setparameterfv;
VGSETPARAMETERIV	amanith_vg_setparameteriv;
VGGETPARAMETERF	amanith_vg_getparameterf;
VGGETPARAMETERI	amanith_vg_getparameteri;
VGGETPARAMETERVECTORSIZE	amanith_vg_getparametervectorsize;
VGGETPARAMETERFV	amanith_vg_getparameterfv;
VGGETPARAMETERIV	amanith_vg_getparameteriv;
VGLOADIDENTITY	amanith_vg_loadidentity;
VGLOADMATRIX	amanith_vg_loadmatrix;
VGGETMATRIX	amanith_vg_getmatrix;
VGMULTMATRIX	amanith_vg_multmatrix;
VGTRANSLATE	amanith_vg_translate;
VGSCALE	amanith_vg_scale;
VGSHEAR	amanith_vg_shear;
VGROTATE	amanith_vg_rotate;
VGMASK	amanith_vg_mask;
#if defined(OPENVG_VERSION_1_1)
VGRENDERTOMASK	amanith_vg_rendertomask;
VGCREATEMASKLAYER	amanith_vg_createmasklayer;
VGDESTROYMASKLAYER	amanith_vg_destroymasklayer;
VGFILLMASKLAYER	amanith_vg_fillmasklayer;
VGCOPYMASK	amanith_vg_copymask;
#endif	
VGCLEAR	amanith_vg_clear;
VGCREATEPATH	amanith_vg_createpath;
VGCLEARPATH	amanith_vg_clearpath;
VGDESTROYPATH	amanith_vg_destroypath;
VGREMOVEPATHCAPABILITIES	amanith_vg_removepathcapabilities;
VGGETPATHCAPABILITIES	amanith_vg_getpathcapabilities;
VGAPPENDPATH	amanith_vg_appendpath;
VGAPPENDPATHDATA	amanith_vg_appendpathdata;
VGMODIFYPATHCOORDS	amanith_vg_modifypathcoords;
VGTRANSFORMPATH	amanith_vg_transformpath;
VGINTERPOLATEPATH	amanith_vg_interpolatepath;
VGPATHLENGTH	amanith_vg_pathlength;
VGPOINTALONGPATH	amanith_vg_pointalongpath;
VGPATHBOUNDS	amanith_vg_pathbounds;
VGPATHTRANSFORMEDBOUNDS	amanith_vg_pathtransformedbounds;
VGDRAWPATH	amanith_vg_drawpath;
VGCREATEPAINT	amanith_vg_createpaint;
VGDESTROYPAINT	amanith_vg_destroypaint;
VGSETPAINT	amanith_vg_setpaint;
VGGETPAINT	amanith_vg_getpaint;
VGSETCOLOR	amanith_vg_setcolor;
VGGETCOLOR	amanith_vg_getcolor;
VGPAINTPATTERN	amanith_vg_paintpattern;
VGCREATEIMAGE	amanith_vg_createimage;
VGDESTROYIMAGE	amanith_vg_destroyimage;
VGCLEARIMAGE	amanith_vg_clearimage;
VGIMAGESUBDATA	amanith_vg_imagesubdata;
VGGETIMAGESUBDATA	amanith_vg_getimagesubdata;
VGCHILDIMAGE	amanith_vg_childimage;
VGGETPARENT	amanith_vg_getparent;
VGCOPYIMAGE	amanith_vg_copyimage;
VGDRAWIMAGE	amanith_vg_drawimage;
VGSETPIXELS	amanith_vg_setpixels;
VGWRITEPIXELS	amanith_vg_writepixels;
VGGETPIXELS	amanith_vg_getpixels;
VGREADPIXELS	amanith_vg_readpixels;
VGCOPYPIXELS	amanith_vg_copypixels;
#if defined(OPENVG_VERSION_1_1)	
VGCREATEFONT	amanith_vg_createfont;
VGDESTROYFONT	amanith_vg_destroyfont;
VGSETGLYPHTOPATH	amanith_vg_setglyphtopath;
VGSETGLYPHTOIMAGE	amanith_vg_setglyphtoimage;
VGCLEARGLYPH	amanith_vg_clearglyph;
VGDRAWGLYPH	amanith_vg_drawglyph;
VGDRAWGLYPHs	amanith_vg_drawglyphs;
#endif	
VGCOLORMATRIX	amanith_vg_colormatrix;
VGCONVOLVE	amanith_vg_convolve;
VGSEPARABLECONVOLVE	amanith_vg_separableconvolve;
VGGAUSSIANBLUR	amanith_vg_gaussianblur;
VGLOOKUP	amanith_vg_lookup;
VGLOOKUPSINGLE	amanith_vg_lookupsingle;
VGHARDWAREQUERY	amanith_vg_hardwarequery;
VGGETSTRING	amanith_vg_getstring;
VGPOSTSWAPBUFFERSAM amanith_vg_postswapbuffersAM;
VGPRIVSURFACECREATEAM		amanith_vg_privsurfacecreateAM;
VGPRIVGETSURFACEWIDTHAM		amanith_vg_privgetsurfacewidthAM;
VGPRIVGETSURFACEHEIGHTAM	amanith_vg_privgetsurfaceheightAM;
VGPRIVGETSURFACEFORMATAM	amanith_vg_privgetsurfaceformatAM;
VGPRIVGETSURFACEPIXELSAM	amanith_vg_privgetsurfacepixelsAM;
VGPRIVCONTEXTCREATEAM		amanith_vg_privcontextcreateAM;
VGPRIVSURFACEDESTROYAM		amanith_vg_privsurfacedestroyAM;
VGPRIVMAKECURRENTAM			amanith_vg_privmakecurrentAM;
VGPRIVCONTEXTDESTROYAM		amanith_vg_privcontextdestroyAM;
VGRESIZESURFACEAM			amanith_vg_resizesurfaceAM;

VGPRIVSURFACECREATEFROMIMAGEAM	amanith_vg_privsurfacecreatefromimageAM;

static HINSTANCE s_hDllInstance;

///////////////////////////////////////////////////////////////////////////////
// AmanithVGのライブラリロード
///////////////////////////////////////////////////////////////////////////////
bool lib_AmanithVG_Load()
{
	LPCWSTR dllName = L"libAmanithVG.dll";

	s_hDllInstance = ::LoadLibrary(dllName);

	if(NULL == s_hDllInstance) {
		printf("loading %ws\n !!!!!!!!!!!!Error code: %d\n", dllName, GetLastError());
	    puts("LoadLibrary error");
		return false;
	}

	//ライブラリのエントリ読み込み
	amanith_vg_geterror	= (VGGETERROR)::GetProcAddress(s_hDllInstance, "vgGetError");
	assert(NULL != amanith_vg_geterror);
	amanith_vg_flush	= (VGFLUSH)::GetProcAddress(s_hDllInstance, "vgFlush");
	assert(NULL != amanith_vg_flush);
	amanith_vg_finish	= (VGFINISH)::GetProcAddress(s_hDllInstance, "vgFinish");
	assert(NULL != amanith_vg_finish);
	amanith_vg_setf	= (VGSETF)::GetProcAddress(s_hDllInstance, "vgSetf");
	assert(NULL != amanith_vg_setf);
	amanith_vg_seti	= (VGSETI)::GetProcAddress(s_hDllInstance, "vgSeti");
	assert(NULL != amanith_vg_seti);
	amanith_vg_setfv	= (VGSETFV)::GetProcAddress(s_hDllInstance, "vgSetfv");
	assert(NULL != amanith_vg_setfv);
	amanith_vg_setiv	= (VGSETIV)::GetProcAddress(s_hDllInstance, "vgSetiv");
	assert(NULL != amanith_vg_setiv);
	amanith_vg_getf	= (VGGETF)::GetProcAddress(s_hDllInstance, "vgGetf");
	assert(NULL != amanith_vg_getf);
	amanith_vg_geti	= (VGGETI)::GetProcAddress(s_hDllInstance, "vgGeti");
	assert(NULL != amanith_vg_geti);
	amanith_vg_getvectorsize	= (VGGETVECTORSIZE)::GetProcAddress(s_hDllInstance, "vgGetVectorSize");
	assert(NULL != amanith_vg_getvectorsize);
	amanith_vg_getfv	= (VGGETFV)::GetProcAddress(s_hDllInstance, "vgGetfv");
	assert(NULL != amanith_vg_getfv);
	amanith_vg_getiv	= (VGGETIV)::GetProcAddress(s_hDllInstance, "vgGetiv");
	assert(NULL != amanith_vg_getiv);
	amanith_vg_setparameterf	= (VGSETPARAMETERF)::GetProcAddress(s_hDllInstance, "vgSetParameterf");
	assert(NULL != amanith_vg_setparameterf);
	amanith_vg_setparameteri	= (VGSETPARAMETERI)::GetProcAddress(s_hDllInstance, "vgSetParameteri");
	assert(NULL != amanith_vg_setparameteri);
	amanith_vg_setparameterfv	= (VGSETPARAMETERFV)::GetProcAddress(s_hDllInstance, "vgSetParameterfv");
	assert(NULL != amanith_vg_setparameterfv);
	amanith_vg_setparameteriv	= (VGSETPARAMETERIV)::GetProcAddress(s_hDllInstance, "vgSetParameteriv");
	assert(NULL != amanith_vg_setparameteriv);
	amanith_vg_getparameterf	= (VGGETPARAMETERF)::GetProcAddress(s_hDllInstance, "vgGetParameterf");
	assert(NULL != amanith_vg_getparameterf);
	amanith_vg_getparameteri	= (VGGETPARAMETERI)::GetProcAddress(s_hDllInstance, "vgGetParameteri");
	assert(NULL != amanith_vg_getparameteri);
	amanith_vg_getparametervectorsize	= (VGGETPARAMETERVECTORSIZE)::GetProcAddress(s_hDllInstance, "vgGetParameterVectorSize");
	assert(NULL != amanith_vg_getparametervectorsize);
	amanith_vg_getparameterfv	= (VGGETPARAMETERFV)::GetProcAddress(s_hDllInstance, "vgGetParameterfv");
	assert(NULL != amanith_vg_getparameterfv);
	amanith_vg_getparameteriv	= (VGGETPARAMETERIV)::GetProcAddress(s_hDllInstance, "vgGetParameteriv");
	assert(NULL != amanith_vg_getparameteriv);
	amanith_vg_loadidentity	= (VGLOADIDENTITY)::GetProcAddress(s_hDllInstance, "vgLoadIdentity");
	assert(NULL != amanith_vg_loadidentity);
	amanith_vg_loadmatrix	= (VGLOADMATRIX)::GetProcAddress(s_hDllInstance, "vgLoadMatrix");
	assert(NULL != amanith_vg_loadmatrix);
	amanith_vg_getmatrix	= (VGGETMATRIX)::GetProcAddress(s_hDllInstance, "vgGetMatrix");
	assert(NULL != amanith_vg_getmatrix);
	amanith_vg_multmatrix	= (VGMULTMATRIX)::GetProcAddress(s_hDllInstance, "vgMultMatrix");
	assert(NULL != amanith_vg_multmatrix);
	amanith_vg_translate	= (VGTRANSLATE)::GetProcAddress(s_hDllInstance, "vgTranslate");
	assert(NULL != amanith_vg_translate);
	amanith_vg_scale	= (VGSCALE)::GetProcAddress(s_hDllInstance, "vgScale");
	assert(NULL != amanith_vg_scale);
	amanith_vg_shear	= (VGSHEAR)::GetProcAddress(s_hDllInstance, "vgShear");
	assert(NULL != amanith_vg_shear);
	amanith_vg_rotate	= (VGROTATE)::GetProcAddress(s_hDllInstance, "vgRotate");
	assert(NULL != amanith_vg_rotate);
	amanith_vg_mask	= (VGMASK)::GetProcAddress(s_hDllInstance, "vgMask");
	assert(NULL != amanith_vg_mask);
	amanith_vg_rendertomask	= (VGRENDERTOMASK)::GetProcAddress(s_hDllInstance, "vgRenderToMask");
	assert(NULL != amanith_vg_rendertomask);
	amanith_vg_createmasklayer	= (VGCREATEMASKLAYER)::GetProcAddress(s_hDllInstance, "vgCreateMaskLayer");
	assert(NULL != amanith_vg_createmasklayer);
	amanith_vg_destroymasklayer	= (VGDESTROYMASKLAYER)::GetProcAddress(s_hDllInstance, "vgDestroyMaskLayer");
	assert(NULL != amanith_vg_destroymasklayer);
	amanith_vg_fillmasklayer	= (VGFILLMASKLAYER)::GetProcAddress(s_hDllInstance, "vgFillMaskLayer");
	assert(NULL != amanith_vg_fillmasklayer);
	amanith_vg_copymask	= (VGCOPYMASK)::GetProcAddress(s_hDllInstance, "vgCopyMask");
	assert(NULL != amanith_vg_copymask);
	amanith_vg_clear	= (VGCLEAR)::GetProcAddress(s_hDllInstance, "vgClear");
	assert(NULL != amanith_vg_clear);
	amanith_vg_createpath	= (VGCREATEPATH)::GetProcAddress(s_hDllInstance, "vgCreatePath");
	assert(NULL != amanith_vg_createpath);
	amanith_vg_clearpath	= (VGCLEARPATH)::GetProcAddress(s_hDllInstance, "vgClearPath");
	assert(NULL != amanith_vg_clearpath);
	amanith_vg_destroypath	= (VGDESTROYPATH)::GetProcAddress(s_hDllInstance, "vgDestroyPath");
	assert(NULL != amanith_vg_destroypath);
	amanith_vg_removepathcapabilities	= (VGREMOVEPATHCAPABILITIES)::GetProcAddress(s_hDllInstance, "vgRemovePathCapabilities");
	assert(NULL != amanith_vg_removepathcapabilities);
	amanith_vg_getpathcapabilities	= (VGGETPATHCAPABILITIES)::GetProcAddress(s_hDllInstance, "vgGetPathCapabilities");
	assert(NULL != amanith_vg_getpathcapabilities);
	amanith_vg_appendpath	= (VGAPPENDPATH)::GetProcAddress(s_hDllInstance, "vgAppendPath");
	assert(NULL != amanith_vg_appendpath);
	amanith_vg_appendpathdata	= (VGAPPENDPATHDATA)::GetProcAddress(s_hDllInstance, "vgAppendPathData");
	assert(NULL != amanith_vg_appendpathdata);
	amanith_vg_modifypathcoords	= (VGMODIFYPATHCOORDS)::GetProcAddress(s_hDllInstance, "vgModifyPathCoords");
	assert(NULL != amanith_vg_modifypathcoords);
	amanith_vg_transformpath	= (VGTRANSFORMPATH)::GetProcAddress(s_hDllInstance, "vgTransformPath");
	assert(NULL != amanith_vg_transformpath);
	amanith_vg_interpolatepath	= (VGINTERPOLATEPATH)::GetProcAddress(s_hDllInstance, "vgInterpolatePath");
	assert(NULL != amanith_vg_interpolatepath);
	amanith_vg_pathlength	= (VGPATHLENGTH)::GetProcAddress(s_hDllInstance, "vgPathLength");
	assert(NULL != amanith_vg_pathlength);
	amanith_vg_pointalongpath	= (VGPOINTALONGPATH)::GetProcAddress(s_hDllInstance, "vgPointAlongPath");
	assert(NULL != amanith_vg_pointalongpath);
	amanith_vg_pathbounds	= (VGPATHBOUNDS)::GetProcAddress(s_hDllInstance, "vgPathBounds");
	assert(NULL != amanith_vg_pathbounds);
	amanith_vg_pathtransformedbounds	= (VGPATHTRANSFORMEDBOUNDS)::GetProcAddress(s_hDllInstance, "vgPathTransformedBounds");
	assert(NULL != amanith_vg_pathtransformedbounds);
	amanith_vg_drawpath	= (VGDRAWPATH)::GetProcAddress(s_hDllInstance, "vgDrawPath");
	assert(NULL != amanith_vg_drawpath);
	amanith_vg_createpaint	= (VGCREATEPAINT)::GetProcAddress(s_hDllInstance, "vgCreatePaint");
	assert(NULL != amanith_vg_createpaint);
	amanith_vg_destroypaint	= (VGDESTROYPAINT)::GetProcAddress(s_hDllInstance, "vgDestroyPaint");
	assert(NULL != amanith_vg_destroypaint);
	amanith_vg_setpaint	= (VGSETPAINT)::GetProcAddress(s_hDllInstance, "vgSetPaint");
	assert(NULL != amanith_vg_setpaint);
	amanith_vg_getpaint	= (VGGETPAINT)::GetProcAddress(s_hDllInstance, "vgGetPaint");
	assert(NULL != amanith_vg_getpaint);
	amanith_vg_setcolor	= (VGSETCOLOR)::GetProcAddress(s_hDllInstance, "vgSetColor");
	assert(NULL != amanith_vg_setcolor);
	amanith_vg_getcolor	= (VGGETCOLOR)::GetProcAddress(s_hDllInstance, "vgGetColor");
	assert(NULL != amanith_vg_getcolor);
	amanith_vg_paintpattern	= (VGPAINTPATTERN)::GetProcAddress(s_hDllInstance, "vgPaintPattern");
	assert(NULL != amanith_vg_paintpattern);
	amanith_vg_createimage	= (VGCREATEIMAGE)::GetProcAddress(s_hDllInstance, "vgCreateImage");
	assert(NULL != amanith_vg_createimage);
	amanith_vg_destroyimage	= (VGDESTROYIMAGE)::GetProcAddress(s_hDllInstance, "vgDestroyImage");
	assert(NULL != amanith_vg_destroyimage);
	amanith_vg_clearimage	= (VGCLEARIMAGE)::GetProcAddress(s_hDllInstance, "vgClearImage");
	assert(NULL != amanith_vg_clearimage);
	amanith_vg_imagesubdata	= (VGIMAGESUBDATA)::GetProcAddress(s_hDllInstance, "vgImageSubData");
	assert(NULL != amanith_vg_imagesubdata);
	amanith_vg_getimagesubdata	= (VGGETIMAGESUBDATA)::GetProcAddress(s_hDllInstance, "vgGetImageSubData");
	assert(NULL != amanith_vg_getimagesubdata);
	amanith_vg_childimage	= (VGCHILDIMAGE)::GetProcAddress(s_hDllInstance, "vgChildImage");
	assert(NULL != amanith_vg_childimage);
	amanith_vg_getparent	= (VGGETPARENT)::GetProcAddress(s_hDllInstance, "vgGetParent");
	assert(NULL != amanith_vg_getparent);
	amanith_vg_copyimage	= (VGCOPYIMAGE)::GetProcAddress(s_hDllInstance, "vgCopyImage");
	assert(NULL != amanith_vg_copyimage);
	amanith_vg_drawimage	= (VGDRAWIMAGE)::GetProcAddress(s_hDllInstance, "vgDrawImage");
	assert(NULL != amanith_vg_drawimage);
	amanith_vg_setpixels	= (VGSETPIXELS)::GetProcAddress(s_hDllInstance, "vgSetPixels");
	assert(NULL != amanith_vg_setpixels);
	amanith_vg_writepixels	= (VGWRITEPIXELS)::GetProcAddress(s_hDllInstance, "vgWritePixels");
	assert(NULL != amanith_vg_writepixels);
	amanith_vg_getpixels	= (VGGETPIXELS)::GetProcAddress(s_hDllInstance, "vgGetPixels");
	assert(NULL != amanith_vg_getpixels);
	amanith_vg_readpixels	= (VGREADPIXELS)::GetProcAddress(s_hDllInstance, "vgReadPixels");
	assert(NULL != amanith_vg_readpixels);
	amanith_vg_copypixels	= (VGCOPYPIXELS)::GetProcAddress(s_hDllInstance, "vgCopyPixels");
	assert(NULL != amanith_vg_copypixels);
	amanith_vg_createfont	= (VGCREATEFONT)::GetProcAddress(s_hDllInstance, "vgCreateFont");
	assert(NULL != amanith_vg_createfont);
	amanith_vg_destroyfont	= (VGDESTROYFONT)::GetProcAddress(s_hDllInstance, "vgDestroyFont");
	assert(NULL != amanith_vg_destroyfont);
	amanith_vg_setglyphtopath	= (VGSETGLYPHTOPATH)::GetProcAddress(s_hDllInstance, "vgSetGlyphToPath");
	assert(NULL != amanith_vg_setglyphtopath);
	amanith_vg_setglyphtoimage	= (VGSETGLYPHTOIMAGE)::GetProcAddress(s_hDllInstance, "vgSetGlyphToImage");
	assert(NULL != amanith_vg_setglyphtoimage);
	amanith_vg_clearglyph	= (VGCLEARGLYPH)::GetProcAddress(s_hDllInstance, "vgClearGlyph");
	assert(NULL != amanith_vg_clearglyph);
	amanith_vg_drawglyph	= (VGDRAWGLYPH)::GetProcAddress(s_hDllInstance, "vgDrawGlyph");
	assert(NULL != amanith_vg_drawglyph);
	amanith_vg_drawglyphs	= (VGDRAWGLYPHs)::GetProcAddress(s_hDllInstance, "vgDrawGlyphs");
	assert(NULL != amanith_vg_drawglyphs);
	amanith_vg_colormatrix	= (VGCOLORMATRIX)::GetProcAddress(s_hDllInstance, "vgColorMatrix");
	assert(NULL != amanith_vg_colormatrix);
	amanith_vg_convolve	= (VGCONVOLVE)::GetProcAddress(s_hDllInstance, "vgConvolve");
	assert(NULL != amanith_vg_convolve);
	amanith_vg_separableconvolve	= (VGSEPARABLECONVOLVE)::GetProcAddress(s_hDllInstance, "vgSeparableConvolve");
	assert(NULL != amanith_vg_separableconvolve);
	amanith_vg_gaussianblur	= (VGGAUSSIANBLUR)::GetProcAddress(s_hDllInstance, "vgGaussianBlur");
	assert(NULL != amanith_vg_gaussianblur);
	amanith_vg_lookup	= (VGLOOKUP)::GetProcAddress(s_hDllInstance, "vgLookup");
	assert(NULL != amanith_vg_lookup);
	amanith_vg_lookupsingle	= (VGLOOKUPSINGLE)::GetProcAddress(s_hDllInstance, "vgLookupSingle");
	assert(NULL != amanith_vg_lookupsingle);
	amanith_vg_hardwarequery	= (VGHARDWAREQUERY)::GetProcAddress(s_hDllInstance, "vgHardwareQuery");
	assert(NULL != amanith_vg_hardwarequery);
	amanith_vg_getstring	= (VGGETSTRING)::GetProcAddress(s_hDllInstance, "vgGetString");
	assert(NULL != amanith_vg_getstring);
	amanith_vg_postswapbuffersAM = (VGPOSTSWAPBUFFERSAM)::GetProcAddress(s_hDllInstance, "vgPostSwapBuffersAM");
	assert(NULL != amanith_vg_postswapbuffersAM);
	amanith_vg_privsurfacecreateAM = (VGPRIVSURFACECREATEAM)::GetProcAddress(s_hDllInstance, "vgPrivSurfaceCreateAM");
	assert(NULL != amanith_vg_privsurfacecreateAM);
	amanith_vg_privgetsurfacewidthAM = (VGPRIVGETSURFACEWIDTHAM)::GetProcAddress(s_hDllInstance, "vgPrivGetSurfaceWidthAM");
	assert(NULL != amanith_vg_privgetsurfacewidthAM);
	amanith_vg_privgetsurfaceheightAM = (VGPRIVGETSURFACEHEIGHTAM)::GetProcAddress(s_hDllInstance, "vgPrivGetSurfaceHeightAM");
	assert(NULL != amanith_vg_privgetsurfaceheightAM);
	amanith_vg_privgetsurfaceformatAM = (VGPRIVGETSURFACEFORMATAM)::GetProcAddress(s_hDllInstance, "vgPrivGetSurfaceFormatAM");
	assert(NULL != amanith_vg_privgetsurfaceformatAM);
	amanith_vg_privgetsurfacepixelsAM = (VGPRIVGETSURFACEPIXELSAM)::GetProcAddress(s_hDllInstance, "vgPrivGetSurfacePixelsAM");
	assert(NULL != amanith_vg_privgetsurfacepixelsAM);
	amanith_vg_privcontextcreateAM = (VGPRIVCONTEXTCREATEAM)::GetProcAddress(s_hDllInstance, "vgPrivContextCreateAM");
	assert(NULL != amanith_vg_privcontextcreateAM);
	amanith_vg_privsurfacedestroyAM = (VGPRIVSURFACEDESTROYAM)::GetProcAddress(s_hDllInstance, "vgPrivSurfaceDestroyAM");
	assert(NULL != amanith_vg_privsurfacedestroyAM);
	amanith_vg_privmakecurrentAM = (VGPRIVMAKECURRENTAM)::GetProcAddress(s_hDllInstance, "vgPrivMakeCurrentAM");
	assert(NULL != amanith_vg_privmakecurrentAM);
	amanith_vg_privcontextdestroyAM = (VGPRIVCONTEXTDESTROYAM)::GetProcAddress(s_hDllInstance, "vgPrivContextDestroyAM");
	assert(NULL != amanith_vg_privcontextdestroyAM);
	amanith_vg_resizesurfaceAM = (VGRESIZESURFACEAM)::GetProcAddress(s_hDllInstance, "vgResizeSurfaceAM");
	assert(NULL != amanith_vg_resizesurfaceAM);
	amanith_vg_privsurfacecreatefromimageAM = (VGPRIVSURFACECREATEFROMIMAGEAM)::GetProcAddress(s_hDllInstance, "vgPrivSurfaceCreateFromImageAM");
	assert(NULL != amanith_vg_privsurfacecreatefromimageAM);

	return true;
}

void lib_AmanithVG_Free()
{
	FreeLibrary(s_hDllInstance);//開放
}